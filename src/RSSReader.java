import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;


import java.util.Scanner;
import java.util.ServiceConfigurationError;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");

        String title = parseValue(channel, "title");
        if (title == null || title.isBlank()){   title = "Empty Title"; }
        out.print("<title>"); out.print(title); out.println("</title>");

        out.println("</head>");
        out.println("<body>");
        out.println("<h1>");

        String link = parseValue(channel, "link");
        out.print("<a href=\""); out.print(link); out.print("\">"); out.print(title); out.println("</a>");

        out.println("</h1>");

        String description = parseValue(channel, "description");
        if (description == null || description.isBlank()){   title = "No description"; }

        out.print("<p>"); out.print(description); out.println("</p>");

        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    private static String parseValue(XMLTree tree, String tagName){
        try{
            int tagIndex = getChildElement(tree, tagName);
            XMLTree tag = tree.child(tagIndex);
            XMLTree value = tag.child(0);
            return value.label();
        }catch (Exception ex){
            return null;
        }
    }


    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        try {
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                if (xml.child(i).label().equals(tag)) {
                    return i;
                }
            }
        }catch (Exception ex){
            // do nothing and return -1
        }
        return -1;
    }

    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Viol ation of: out.is_open";

        out.println("<tr>");
        out.println(parseDate(item));
        out.println(parseSource(item));
        out.println(parseNews(item));
        out.println("</tr>");
    }

    // the title, if present and not empty, or the description, if not empty, or "No title available",
    // which should be linked if a link for the news item is available
    static String parseNews(XMLTree item){
        StringBuilder sb = new StringBuilder(); // https://stackoverflow.com/questions/69576641/why-would-you-use-a-stringbuilder-method-over-a-string-in-java
        sb.append("<td>");
        sb.append(parseNewsATag(item));
        sb.append(parseNewsTitle(item));
        sb.append("</a>");
        sb.append("</td>");
        return sb.toString();
    }

    static String parseNewsTitle(XMLTree item){
        try{
            String title = parseValue(item, "title");
            String description = parseValue(item,"description");
            if (title != null && !title.isBlank()){
                return title;
            }
            if (description != null && !description.isBlank()){
                return description;
            }
        } catch (Exception ex){
            System.out.println("Caught Exception in parseNewsTitle :" + ex.getMessage());
        }
        return "No title available";
    }
    static String parseNewsATag(XMLTree item){
        try{
            String link = parseValue(item, "link");
            if (link != null && !link.isBlank()){
                return "<a href=\"" + link + "\">";
            }
        } catch (Exception ex){
            System.out.println("Caught Exception in parseNewsLink :" + ex.getMessage());
        }
        return "<a>";
    }
    static String parseDate(XMLTree item){
        try{
            String pubDate = parseValue(item, "pubDate");
            if(pubDate == null || pubDate.isBlank()){
                return "<td> No date available </td>";
            }
            return "<td> " + pubDate + "</td>";
        }catch (Exception ex){
            System.out.println("Caught Exception in parseDate :" + ex.getMessage());
        }
        return "<td> No date available </td>";
    }

    static String parseSource(XMLTree item){
        try{
            int sourceIndex = getChildElement(item, "source");
            XMLTree source = item.child(sourceIndex);
            String sourceUrl = source.attributeValue("url");
            String sourceName = source.child(0).label();
            return "<td> <a href=\"" + sourceUrl + "\">" + sourceName + "</a> </td>";

        } catch (Exception ex){
            System.out.println("Caught Exception in parseSource :" + ex.getMessage());
        }
        return "<td> No source available </td>";
    }


    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // TODO clean this up and ask for user input
        out.print("Please enter a valid URL of an RSS 2.0 feed: ");
        String inputUrl = in.nextLine();
        XMLTree inputTree = new XMLTree1(inputUrl);


        out.print("Please enter the name of an output file including the .html extension: ");
        String outputFileName = in.nextLine();
        try {
            SimpleWriter outputFile = new SimpleWriter1L(outputFileName);


            if (inputTree.label().equals("rss") && inputTree.attributeValue("version").equals("2.0")) {

                XMLTree channel = inputTree.child(getChildElement(inputTree, "channel"));
                outputHeader(channel, outputFile);

                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    XMLTree item = channel.child(i);
                    if (item.label().equals("item")) {
                        processItem(item, outputFile);
                    }
                }
                outputFooter(outputFile);
            } else {
                out.println("ERROR! please enter a valid RSS feed. Ensure that it has the value 2.0");
            }
            outputFile.close();
        }
        catch (Exception ex){
            out.println("ERROR! please enter a valid output file. " + ex.getMessage());
        }


        in.close();
        out.close();


    }

}
